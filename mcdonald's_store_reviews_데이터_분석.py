# -*- coding: utf-8 -*-
"""McDonald's Store Reviews 데이터 분석.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UjC2wkEkqb02jwErvZwLB1t2upNBO_yT

'reviewer_id': 고객의 고유 ID
'store_name': 맥도날드 매장 이름
'category': 맥도날드 매장의 카테고리(예: 패스트푸드, 음식점 등)를 나타냅니다.
'store_address': 매장 주소
'latitude': 매장 위치의 위도
'longitude': 매장 위치의 경도
'rating_count': 각 맥도날드 매장에 대한 리뷰 개수입니다.
'review_time': 리뷰가 작성된 시간을 나타냅니다.
'review': 리뷰 내용
'rating': 평가 점수

데이터 수집: 맥도널드 매장의 판매 관련 데이터를 수집합니다. 이는 매출, 거래량, 주문액, 제품 판매량 등의 정보를 포함할 수 있습니다.

데이터 전처리: 수집한 데이터를 분석에 적합한 형태로 가공합니다. 이는 결측치 처리, 이상치 제거, 데이터 형식 변환 등을 포함할 수 있습니다.

매장 성과 분석: 매장의 성과를 평가하기 위해 매출, 거래량, 평균 주문액 등의 지표를 분석합니다. 매장 간 비교, 시간대별 성과 변동 등을 파악하여 성과가 좋은 매장과 개선이 필요한 매장을 식별합니다.

제품 분석: 제품의 판매량, 인기 제품, 시즌별 변동성 등을 분석하여 제품 포트폴리오 관리에 도움을 줍니다. 제품의 선호도, 가격 탄력성, 판매 추세 등을 파악하여 새로운 제품 개발이나 기존 제품 개선에 대한 의사 결정을 지원합니다.

시각화와 결과 해석: 분석 결과를 시각화하여 보기 쉽게 표현하고, 이를 통해 매장의 성과와 제품에 대한 인사이트를 도출합니다. 결과를 해석하고, 의사 결정에 활용할 수 있는 인사이트를 도출합니다.

보고서 작성: 프로젝트의 목적, 분석 방법, 결과, 결론 등을 포함한 보고서를 작성합니다.

매출 분석: 'rating_count' 컬럼을 활용하여 매장의 매출을 추정할 수 있습니다. 매장별로 매출을 합산하여 매장 간 매출 비교를 시각화하거나 시간에 따른 매출 추이를 분석할 수 있습니다.

평균 주문액 분석: 'rating_count'와 'rating' 컬럼을 활용하여 매장의 평균 주문액을 계산할 수 있습니다. 매장별로 평균 주문액을 비교하고, 매장의 제품 구성이나 가격 정책에 따른 영향을 파악할 수 있습니다.

지역별 성과 분석: 'store_address'를 기준으로 매장의 성과를 지역별로 분석할 수 있습니다. 지도 시각화를 통해 매장의 위치와 성과를 시각적으로 확인하고, 지역별 특성을 파악하여 개별 매장에 맞는 전략을 수립할 수 있습니다.

고객 만족도 분석: 'review' 컬럼을 활용하여 고객의 리뷰를 분석하고, 매장의 서비스나 제품에 대한 고객 만족도를 평가할 수 있습니다. 긍정적인 리뷰와 부정적인 리뷰를 구분하여 매장의 개선이 필요한 부분을 식별할 수 있습니다.

시간대별 성과 분석: 'review_time' 컬럼을 활용하여 시간대별 매장의 성과를 분석할 수 있습니다. 피크 시간대와 주문 처리 시간, 대기 시간 등을 비교하여 운영 효율성을 평가하고 개선 방안을 도출할 수 있습니다.

경쟁 매장 분석: 주변 경쟁 매장의 데이터를 수집하여 비교 분석할 수 있습니다. 매장의 성과와 경쟁 매장의 위치, 제품 구성, 가격 등을 비교하여 경쟁력을 평가하고, 경쟁 매장과의 차별화 전략을 수립할 수 있습니다.

이러한 분석을 위해서는 데이터 전처리, 시각화, 통계 분석 등의 과정이 필요합니다. Python의 pandas, matplotlib, plotly와 같은 라이브러리를 활용하여 데이터를 처리하고 시각화할 수 있습니다.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
data = pd.read_csv(f"/content/drive/MyDrive/SNU-COSS-2023/McDonald_s_Reviews.csv", encoding='cp1252')
df = data.copy()

df.shape

df.info()

df.columns

df

# 데이터 전처리 : rating을 숫자로
df['rating'] = df['rating'].str.extract('(\d+)').astype(int)
df

# 'store_name'이 'McDonald's'인 데이터 개수 세기
count_mcdonalds = df[df['store_name'] == "ýýýMcDonald's"].shape[0]

# 결과 출력
print(count_mcdonalds)

# 데이터 전처리 : 인코딩 오류를 McDonald's로 바꿔주기
df['store_name'] = df['store_name'].str.replace('ýýýMcDonald\'s', 'McDonald\'s')
df.nunique()

# 데이터 전처리 : 컬럼명 공백 삭제
df.columns

# 컬럼명 변경
df = df.rename(columns={'latitude ': 'latitude'})

# 변경된 컬럼명 확인
df.columns

# 결측치
df.isnull().sum()

df.isnull().mean()

df = df.dropna(subset=['latitude', 'longitude'])
df.isnull().sum()

"""## 매출 분석 : 매장별 매출 추정하기"""

import pandas as pd
import plotly.express as px

df.loc[df['store_address'] == "151 West 34th Street (Macy's 7th Floor, New York, NY 10001, United States", 'store_address'] = "151 West 34th Street (Macy's 7th Floor, New York, NY 10001, United States)"
# store_address를 기준으로 rating의 평균 계산
rating_mean_by_address = df.groupby('store_address')['rating'].mean().reset_index()

# 평균 rating을 기준으로 내림차순 정렬
rating_mean_by_address = rating_mean_by_address.sort_values(by='rating', ascending=False)

# Plotly를 사용하여 시각화
fig = px.bar(rating_mean_by_address, x='store_address', y='rating', title='Average Rating by Store Address',
             color='rating', color_continuous_scale='RdBu')

fig.show()

# 평균 rating 기준으로 정렬하여 상위 2개와 하위 2개 선택
top_2_ratings = rating_mean_by_address.nlargest(2, 'rating')
bottom_2_ratings = rating_mean_by_address.nsmallest(2, 'rating')

# 상위 2개의 주소 출력
print("Highest Rated Addresses:\n")
print(top_2_ratings['store_address'])

# 하위 2개의 주소 출력
print("Lowest Rated Addresses:\n")
print(bottom_2_ratings['store_address'])

print(rating_mean_by_address['store_address'][32]+'\n',
rating_mean_by_address['store_address'][21]+'\n',
rating_mean_by_address['store_address'][10]+'\n',
rating_mean_by_address['store_address'][13])

"""## 지도"""

import pandas as pd
import folium

grouped_data = df.groupby('store_address')['rating'].mean().reset_index()
# Folium 지도 객체 생성
m = folium.Map(location=[37.7749, -90.4194], zoom_start=4)  # 지도 중심 좌표와 줌 레벨 설정

# 평균 rating에 따라 색상을 지정하고, 마커를 지도에 추가
for index, row in grouped_data.iterrows():
    address = row['store_address']
    rating_mean = row['rating']
    location = df.loc[df['store_address'] == address, ['latitude', 'longitude']].values[0]

    # 평균 rating에 따라 색상 및 아이콘 설정
    if rating_mean > 3.69:
        color = 'blue'
        icon = 'star'

    elif rating_mean < 2.0:
        color = 'red'
        icon = 'star'
    else:
        continue

    folium.Marker(
        location=location,
        popup=f'Address: {address}<br>Rating Mean: {rating_mean}',
        icon=folium.Icon(color=color, icon=icon)  # 투명도 설정
    ).add_to(m)

# 지도 출력
m

"""## 4곳 데이터 프레임"""

"""
Highest Rated Addresses:

32    7010 Bradlick Shopping Center, Annandale, VA 2...
21       429 7th Ave, New York, NY 10001, United States
Name: store_address, dtype: object
Lowest Rated Addresses:

10    151 West 34th Street (Macy's 7th Floor, New Yo...
13    1650 Washington Ave, Miami Beach, FL 33139, Un...
Name: store_address, dtype: object
                            """
# 특정 주소를 포함한 데이터셋 생성 top1
address1 = "7010 Bradlick Shopping Center, Annandale, VA 22003, United States"
address2 = "429 7th Ave, New York, NY 10001, United States"
address3 = df['store_address'] == "151 West 34th Street (Macy's 7th Floor, New York, NY 10001, United States)"
address4 = "1650 Washington Ave, Miami Beach, FL 33139, United States"

top1 = df[df['store_address'].str.contains(address1)]
top1.head(2)

"""### top1"""

import pandas as pd

# top1 데이터를 review_time으로 묶어서 평균 rating 계산
top1_grouped = top1.groupby('review_time')['rating'].mean().reset_index()

# review_time을 기준으로 정렬
top1_grouped = top1_grouped.sort_values('review_time')

# 변화를 확인하기 위해 데이터 출력
top1_grouped

import plotly.subplots as sp
import plotly.graph_objs as go

# 그래프를 가로로 나란히 배치할 수 있는 subplot 객체 생성
fig = sp.make_subplots(rows=1, cols=3, subplot_titles=('Average Rating - 5Years', 'Average Rating - 6Months', 'Average Rating - 1Months'))

# 원하는 x축 순서 설정
# 원하는 x축 순서 설정
x_order_months = ['a month ago', '2 months ago', '3 months ago', '4 months ago', '5 months ago', '6 months ago'][::-1]
x_order_years = ['a year ago', '2 years ago', '3 years ago', '4 years ago', '5 years ago'][::-1]
x_order_other = ['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago'][::-1]
# 'years' 또는 'year'가 들어가는 경우
years_data = top1_grouped[top1_grouped['review_time'].str.contains('years|year')]
years_data['review_time'] = pd.Categorical(years_data['review_time'], categories=x_order_years, ordered=True)
years_data = years_data.sort_values('review_time')
fig.add_trace(go.Line(x=years_data['review_time'], y=years_data['rating']), row=1, col=1)

# 'months' 또는 'month'가 들어가는 경우
months_data = top1_grouped[top1_grouped['review_time'].str.contains('months|month')]
months_data['review_time'] = pd.Categorical(months_data['review_time'], categories=x_order_months, ordered=True)
months_data = months_data.sort_values('review_time')
fig.add_trace(go.Line(x=months_data['review_time'], y=months_data['rating']), row=1, col=2)

# 두 경우 모두 아닌 경우
other_data = top1_grouped[~top1_grouped['review_time'].str.contains('months|years|month|year')]
other_data['review_time'] = pd.Categorical(other_data['review_time'], categories=x_order_other, ordered=True)
other_data = other_data.sort_values('review_time')
fig.add_trace(go.Line(x=other_data['review_time'], y=other_data['rating']), row=1, col=3)

# 그래프 레이아웃 설정
fig.update_layout(title='Average Rating by Time', height=500, width=1500)

# 그래프 출력
fig.show()

import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# 'a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago' 값을 포함한 리뷰 선택
selected_data = top1[top1['review_time'].isin(['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago'])]

# rating이 2.0 이하인 데이터 선택
low_rating_data = selected_data[selected_data['rating'] <= 2.0]

# 리뷰 열의 모든 텍스트를 하나의 문자열로 결합
low_rating_text = ' '.join(low_rating_data['review'])

# 영어 이외의 모든 문자 제거
low_rating_text = re.sub('[^a-zA-Z]', ' ', low_rating_text)

# 특정 키워드 제거
low_rating_text = low_rating_text.replace('McDonald', ' ')

# 워드 클라우드 생성
wordcloud = WordCloud(width=800, height=400, background_color='white')

# 워드 클라우드에 텍스트 적용
wordcloud.generate(low_rating_text)

# 워드 클라우드 시각화
plt.figure(figsize=(8, 4))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

"""### top2"""

top2 = df[df['store_address'].str.contains(address2)]
top2.head(2)

# top1 데이터를 review_time으로 묶어서 평균 rating 계산
top2_grouped = top2.groupby('review_time')['rating'].mean().reset_index()

# review_time을 기준으로 정렬
top2_grouped = top2_grouped.sort_values('review_time')

# 변화를 확인하기 위해 데이터 출력
top2_grouped

import plotly.subplots as sp
import plotly.graph_objs as go

# 그래프를 가로로 나란히 배치할 수 있는 subplot 객체 생성
fig = sp.make_subplots(rows=1, cols=3, subplot_titles=('Average Rating - 5Years', 'Average Rating - 6Months', 'Average Rating - 1Months'))

# 원하는 x축 순서 설정
x_order_months = ['a month ago', '2 months ago', '3 months ago', '4 months ago', '5 months ago', '6 months ago'][::-1]
x_order_years = ['a year ago', '2 years ago', '3 years ago', '4 years ago', '5 years ago'][::-1]
x_order_other = ['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago'][::-1]

# 'years' 또는 'year'가 들어가는 경우
years_data = top2_grouped[top2_grouped['review_time'].str.contains('years|year')]
years_data['review_time'] = pd.Categorical(years_data['review_time'], categories=x_order_years, ordered=True)
years_data = years_data.sort_values('review_time')
fig.add_trace(go.Line(x=years_data['review_time'], y=years_data['rating']), row=1, col=1)

# 'months' 또는 'month'가 들어가는 경우
months_data = top2_grouped[top2_grouped['review_time'].str.contains('months|month')]
months_data['review_time'] = pd.Categorical(months_data['review_time'], categories=x_order_months, ordered=True)
months_data = months_data.sort_values('review_time')
fig.add_trace(go.Line(x=months_data['review_time'], y=months_data['rating']), row=1, col=2)

# 두 경우 모두 아닌 경우
other_data = top2_grouped[~top2_grouped['review_time'].str.contains('months|years|month|year')]
other_data['review_time'] = pd.Categorical(other_data['review_time'], categories=x_order_other, ordered=True)
other_data = other_data.sort_values('review_time')
fig.add_trace(go.Line(x=other_data['review_time'], y=other_data['rating']), row=1, col=3)

# 그래프 레이아웃 설정
fig.update_layout(title='Average Rating by Time', height=500, width=1500)

# 그래프 출력
fig.show()

import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# 'a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago' 값을 포함한 리뷰 선택
selected_data = top2[top2['review_time'].isin(['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago'])]

# rating이 2.0 이하인 데이터 선택
low_rating_data = selected_data[selected_data['rating'] <= 2.0]

# 리뷰 열의 모든 텍스트를 하나의 문자열로 결합
low_rating_text = ' '.join(low_rating_data['review'])

# 영어 이외의 모든 문자 제거
low_rating_text = re.sub('[^a-zA-Z]', ' ', low_rating_text)

# 특정 키워드 제거
low_rating_text = low_rating_text.replace('McDonald', ' ')

# 워드 클라우드 생성
wordcloud = WordCloud(width=800, height=400, background_color='white')

# 워드 클라우드에 텍스트 적용
wordcloud.generate(low_rating_text)

# 워드 클라우드 시각화
plt.figure(figsize=(8, 4))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

"""### bottom1"""

bottom1 = df[df['store_address'] == "151 West 34th Street (Macy's 7th Floor, New York, NY 10001, United States)"]
bottom1.head(2)

# top1 데이터를 review_time으로 묶어서 평균 rating 계산
bottom1_grouped = bottom1.groupby('review_time')['rating'].mean().reset_index()

# review_time을 기준으로 정렬
bottom1_grouped = bottom1_grouped.sort_values('review_time')

# 변화를 확인하기 위해 데이터 출력
bottom1_grouped

import plotly.subplots as sp
import plotly.graph_objs as go

# 그래프를 가로로 나란히 배치할 수 있는 subplot 객체 생성
fig = sp.make_subplots(rows=1, cols=3, subplot_titles=('Average Rating - 5Years', 'Average Rating - 6Months', 'Average Rating - 1Months'))

# 원하는 x축 순서 설정
x_order_months = ['a month ago', '2 months ago', '3 months ago', '4 months ago', '5 months ago', '6 months ago'][::-1]
x_order_years = ['a year ago', '2 years ago', '3 years ago', '4 years ago', '5 years ago'][::-1]
x_order_other = ['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago'][::-1]

# 'years' 또는 'year'가 들어가는 경우
years_data = bottom1_grouped[bottom1_grouped['review_time'].str.contains('years|year')]
years_data['review_time'] = pd.Categorical(years_data['review_time'], categories=x_order_years, ordered=True)
years_data = years_data.sort_values('review_time')
fig.add_trace(go.Line(x=years_data['review_time'], y=years_data['rating']), row=1, col=1)

# 'months' 또는 'month'가 들어가는 경우
months_data = bottom1_grouped[bottom1_grouped['review_time'].str.contains('months|month')]
months_data['review_time'] = pd.Categorical(months_data['review_time'], categories=x_order_months, ordered=True)
months_data = months_data.sort_values('review_time')
fig.add_trace(go.Line(x=months_data['review_time'], y=months_data['rating']), row=1, col=2)

# 두 경우 모두 아닌 경우
other_data = bottom1_grouped[~bottom1_grouped['review_time'].str.contains('months|years|month|year')]
other_data['review_time'] = pd.Categorical(other_data['review_time'], categories=x_order_other, ordered=True)
other_data = other_data.sort_values('review_time')
fig.add_trace(go.Line(x=other_data['review_time'], y=other_data['rating']), row=1, col=3)

# 그래프 레이아웃 설정
fig.update_layout(title='Average Rating by Time', height=500, width=1500)

# 그래프 출력
fig.show()

import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# 'a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago' 값을 포함한 리뷰 선택
selected_data = bottom1[bottom1['review_time'].isin(['a month ago', '2 months ago', 'a months ago'])]

# rating이 2.0 이하인 데이터 선택
low_rating_data = selected_data[selected_data['rating'] <= 2.0]

# 리뷰 열의 모든 텍스트를 하나의 문자열로 결합
low_rating_text = ' '.join(low_rating_data['review'])

# 영어 이외의 모든 문자 제거
low_rating_text = re.sub('[^a-zA-Z]', ' ', low_rating_text)

# 특정 키워드 제거
low_rating_text = low_rating_text.replace('McDonald', ' ')

# 워드 클라우드 생성
wordcloud = WordCloud(width=800, height=400, background_color='white')

# 워드 클라우드에 텍스트 적용
wordcloud.generate(low_rating_text)

# 워드 클라우드 시각화
plt.figure(figsize=(8, 4))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

"""### bottom2"""

bottom2 = df[df['store_address'].str.contains(address4)]
bottom2.head(2)

# top1 데이터를 review_time으로 묶어서 평균 rating 계산
bottom2_grouped = bottom2.groupby('review_time')['rating'].mean().reset_index()

# review_time을 기준으로 정렬
bottom2_grouped = bottom2_grouped.sort_values('review_time')

# 변화를 확인하기 위해 데이터 출력
bottom2_grouped

import plotly.subplots as sp
import plotly.graph_objs as go

# 그래프를 가로로 나란히 배치할 수 있는 subplot 객체 생성
fig = sp.make_subplots(rows=1, cols=3, subplot_titles=('Average Rating - 5Years', 'Average Rating - 6Months', 'Average Rating - 1Months'))

# 원하는 x축 순서 설정
x_order_months = ['a month ago', '2 months ago', '3 months ago', '4 months ago', '5 months ago', '6 months ago'][::-1]
x_order_years = ['a year ago', '2 years ago', '3 years ago', '4 years ago', '5 years ago'][::-1]
x_order_other = ['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago'][::-1]

# 'years' 또는 'year'가 들어가는 경우
years_data = bottom2_grouped[bottom2_grouped['review_time'].str.contains('years|year')]
years_data['review_time'] = pd.Categorical(years_data['review_time'], categories=x_order_years, ordered=True)
years_data = years_data.sort_values('review_time')
fig.add_trace(go.Line(x=years_data['review_time'], y=years_data['rating']), row=1, col=1)

# 'months' 또는 'month'가 들어가는 경우
months_data = bottom2_grouped[bottom2_grouped['review_time'].str.contains('months|month')]
months_data['review_time'] = pd.Categorical(months_data['review_time'], categories=x_order_months, ordered=True)
months_data = months_data.sort_values('review_time')
fig.add_trace(go.Line(x=months_data['review_time'], y=months_data['rating']), row=1, col=2)

# 두 경우 모두 아닌 경우
other_data = bottom2_grouped[~bottom2_grouped['review_time'].str.contains('months|years|month|year')]
other_data['review_time'] = pd.Categorical(other_data['review_time'], categories=x_order_other, ordered=True)
other_data = other_data.sort_values('review_time')
fig.add_trace(go.Line(x=other_data['review_time'], y=other_data['rating']), row=1, col=3)

# 그래프 레이아웃 설정
fig.update_layout(title='Average Rating by Time', height=500, width=1500)

# 그래프 출력
fig.show()

import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# 'a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago' 값을 포함한 리뷰 선택
selected_data = bottom2[bottom2['review_time'].isin(['a day ago', '2 days ago', 'a week ago', '2 weeks ago', '3 weeks ago', 'a month ago'])]

# rating이 2.0 이하인 데이터 선택
low_rating_data = selected_data[selected_data['rating'] <= 2.0]

# 리뷰 열의 모든 텍스트를 하나의 문자열로 결합
low_rating_text = ' '.join(low_rating_data['review'])

# 영어 이외의 모든 문자 제거
low_rating_text = re.sub('[^a-zA-Z]', ' ', low_rating_text)

# 특정 키워드 제거
low_rating_text = low_rating_text.replace('McDonald', ' ')

# 워드 클라우드 생성
wordcloud = WordCloud(width=800, height=400, background_color='white')

# 워드 클라우드에 텍스트 적용
wordcloud.generate(low_rating_text)

# 워드 클라우드 시각화
plt.figure(figsize=(8, 4))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()